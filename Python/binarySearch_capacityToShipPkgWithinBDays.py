# -*- coding: utf-8 -*-
"""
Created on Thu Dec 22 13:10:37 2022

@author: USER
"""

#####################
# Try non bisection below but my own answer commented below is suboptimal
# need to think revisit later
#####################


# Problem Description 
# A conveyor belt has packages that must be shipped from one port to another within B days.
# The ith package on the conveyor belt has a weight of A[i]. Each day, we load the ship with
#  packages on the conveyor belt (in the order given by weights). We may not load more weight than
# the maximum weight capacity of the ship.

# Return the least weight capacity of the ship that will result in all the packages on the 
# conveyor belt being shipped within B days.

# Problem Constraints
# 1 <= B <= |A| <= 5 * 105
# 1 <= A[i] <= 105

# Input Format
# First argument is array of integers A denoting the weights.
# Second argument is the integer B denoting the number of days. 

# Output Format
# Return the least weight capacity of the ship.

# Example Input
# Input 1:
A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
B = 5
# Input 2:
A = [3, 2, 2, 4, 1, 4]
B = 3

# Example Output
# Ouput 1:15
# Ouput 2:6
# Example Explanation
# Explanation 1:
# A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
# 1st day: 1, 2, 3, 4, 5
# 2nd day: 6, 7
# 3rd day: 8
# 4th day: 9
# 5th day: 10
# Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and 
# splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.
# Explanation 2:

# A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:
# 1st day: 3, 2
# 2nd day: 2, 4
# 3rd day: 1, 4
# class Solution:
#     # @param A : list of integers
#     # @param B : integer
#     # @return an integer
#     def solve(self, A, B):
    
 # [A[i:i + 2] for i in range(0, len(A), 2)]

# temp = [4076, 3561, 4369, 3974, 3758, 4200, 4374, 3748, 4102, 3815, 4256, 3898, 3449, 3428, 4036, 4470, 3621, 4158, 3960, 3589, 4357, 4435, 3583, 3500, 3823, 4308, 3450, 4399, 3557, 3412, 4085, 4112, 3523, 4017, 3759, 3829, 4095, 4375, 4383, 4111, 3779, 4278, 4094, 3884, 3824, 4207, 3794, 3455, 3505, 3499, 3898, 4197, 3670, 4030, 3659, 3502, 3513, 3710, 3652, 3402, 4119, 3618, 3933]
# min(temp)
# max(temp)
# temp.index(min(temp))
# temp[55: 60]
# temp.index(max(temp))
# A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# A.reverse()
# temp = list(range(0, len(A), 2))
# temp_block = [(A[i:i + 2]) for i in temp]
# temp_block[4]
# temp_block_sum = [sum(x) for x in temp_block]
# cur_min = min(temp_block_sum)
# cur_max = max(temp_block_sum)
# low_ix = temp_block_sum.index(cur_min)
# high_ix =  temp_block_sum.index(cur_max)
# counter = high_ix - low_ix

# if counter > 0:
#     while counter > 0:
#         temp_block[high_ix - 1].append(temp_block[high_ix].pop(0))
#         counter -= 1
#         high_ix -= 1
# elif counter < 0:
#     while counter < 0:
#         # print(low_ix, temp_block[low_ix - 1][-1])
#         temp_block[high_ix + 1].insert(0, temp_block[high_ix].pop(-1))
#         high_ix += 1
#         counter += 1
# temp_block       
# [sum(x) for x in temp_block]        

# len(A)// B
    def solve(A, B):
        def isValid(A, B, mx):
            st = 1
            tot = 0
            for i in range(n_A):
                tot += A[i]
        
                if (tot > mx):
                    st += 1
                    tot = A[i]    
                if (st > B):
                    return False    
            return True

        n_A = len(A)
        tot = sum(A)      
        s = A[0]

        for i in range(1, n_A):
            s = max(s, A[i])
        e = tot
        res = -1

        while (s <= e):
            mid = s + (e - s) // 2
            if (isValid(A, B, mid)):
                res = mid
                e = mid - 1
            else:
                s = mid + 1
        return(res)
    
    solve(A, B)
    # n_A = len(A)
    # n_init_block = n_A // B
    # min_n_block = 1
    # toLoop = True
    
    # cur_ix_list = list(range(0, len(A), n_init_block - 1))
    # # print(cur_ix_list)
    # # print(cur_ix_list, len(cur_ix_list))
    # cur_block = [A[i:i + n_init_block] for i in cur_ix_list]
    # # print(cur_block[0], len(cur_block[0]))
    # # print(cur_block[1], len(cur_block[1]))
    # # print(cur_block[-1], len(cur_block[-1]))
    # while toLoop:
    #     # cur_block = [sum(A[i:i + 2]) for i in cur_ix_list]
    #     # print(cur_block)
    #     cur_block_sum = [sum(x) for x in cur_block]
    #     cur_min = min(cur_block_sum)
    #     cur_max = max(cur_block_sum)
    #     # old_max = cur_max if toLoop
    #     cur_min_ix = cur_block_sum.index(cur_min)
    #     cur_max_ix = cur_block_sum.index(cur_max)
    #     counter = cur_max_ix - cur_min_ix

    #     if counter > 0:
    #         while counter > 0:
    #             if (len(cur_block[cur_max_ix]) > 1):
    #                 cur_block[cur_max_ix - 1].append(cur_block[cur_max_ix].pop(0))
    #                 counter -= 1
    #                 cur_max_ix -= 1
    #             else:
    #                 break
    #     elif counter < 0:
    #         while counter < 0:
    #             # print(low_ix, cur_block[low_ix - 1][-1])
    #             if (len(cur_block[cur_max_ix]) > 1):                
    #                 cur_block[cur_max_ix + 1].insert(0, cur_block[cur_max_ix].pop(-1))
    #                 cur_max_ix += 1
    #                 counter += 1
    #             else:
    #                 break
    #     temp_block_sum = [sum(x) for x in cur_block]
    #     temp_max = max(temp_block_sum)
    #     if (temp_max >= cur_max):
    #         return cur_max
        
                
# A = [ 130, 185, 56, 15, 88, 100, 60, 15, 82, 55, 188, 85, 154, 128, 112, 82, 43, 182, 7, 64, 79, 87, 112, 39, 164, 175, 180, 192, 158, 38, 79, 191, 171, 178, 57, 97, 79, 3, 166, 154, 194, 85, 72, 108, 80, 34, 37, 83, 68, 119, 132, 127, 37, 22, 176, 76, 47, 85, 30, 87, 39, 16, 112, 56, 38, 123, 171, 118, 7, 165, 171, 97, 53, 54, 121, 32, 169, 142, 53, 195, 73, 138, 22, 166, 109, 136, 131, 37, 195, 109, 159, 2, 185, 97, 3, 21, 121, 171, 22, 184, 134, 23, 10, 124, 151, 117, 103, 182, 75, 172, 85, 188, 195, 170, 123, 51, 8, 105, 72, 118, 15, 156, 181, 63, 32, 157, 196, 150, 68, 60, 180, 145, 120, 65, 171, 171, 78, 17, 107, 120, 200, 136, 65, 6, 90, 19, 61, 163, 145, 69, 98, 70, 98, 43, 56, 160, 150, 86, 14, 60, 50, 19, 108, 103, 39, 8, 55, 7, 59, 136, 153, 53, 60, 132, 143, 80, 195, 194, 142, 147, 96, 149, 119, 49, 108, 170, 109, 101, 13, 196, 134, 142, 29, 145, 14, 109, 147, 113, 150, 62, 121, 61, 10, 62, 190, 151, 78, 182, 102, 165, 48, 32, 47, 173, 14, 162, 78, 197, 87, 111, 55, 52, 176, 93, 3, 192, 179, 200, 149, 135, 80, 97, 67, 65, 189, 147, 51, 111, 192, 159, 179, 199, 5, 134, 169, 44, 177, 181, 43, 118, 87, 130, 107, 185, 138, 91, 140, 85, 33, 94, 155, 1, 77, 46, 165, 82, 155, 195, 159, 36, 74, 99, 54, 197, 32, 185, 37, 61, 156, 53, 159, 8, 155, 160, 24, 82, 32, 96, 60, 3, 8, 144, 127, 6, 122, 171, 83, 173, 53, 122, 23, 16, 191, 182, 85, 144, 178, 169, 159, 113, 143, 82, 14, 167, 159, 195, 166, 2, 35, 78, 40, 73, 107, 159, 34, 142, 14, 36, 64, 163, 32, 179, 180, 59, 67, 77, 146, 7, 44, 163, 160, 6, 16, 122, 130, 178, 11, 169, 163, 127, 46, 51, 170, 89, 50, 57, 26, 65, 124, 24, 103, 160, 46, 36, 54, 124, 184, 122, 193, 193, 140, 51, 4, 175, 162, 165, 91, 57, 115, 159, 194, 167, 25, 82, 90, 60, 120, 152, 147, 88, 12, 69, 29, 129, 125, 162, 22, 5, 129, 189, 168, 29, 12, 181, 49, 180, 18, 175, 78, 173, 155, 22, 198, 119, 61, 118, 171, 32, 94, 104, 9, 181, 49, 142, 194, 116, 187, 95, 156, 114, 21, 112, 47, 183, 114, 34, 150, 44, 82, 49, 107, 99, 158, 82, 67, 71, 154, 27, 53, 51, 97, 150, 134, 114, 131, 51, 96, 21, 45, 65, 158, 54, 56, 28, 166, 190, 103, 148, 40, 14, 186, 20, 89, 171, 15, 124, 103, 4, 96, 44, 131, 97, 112, 77, 24, 85, 48, 49, 143, 104, 47, 156, 17, 153, 23, 151, 8, 96, 159, 47, 13, 41, 20, 34, 90, 78, 34, 67, 58, 119, 122, 16, 191, 57, 125, 165, 178, 135, 169, 18, 198, 147, 58, 169, 154, 31, 61, 183, 11, 19, 10, 66, 107, 82, 36, 137, 183, 39, 43, 126, 145, 4, 45, 128, 167, 91, 9, 24, 93, 61, 148, 161, 105, 121, 134, 95, 167, 126, 167, 25, 69, 108, 77, 124, 193, 103, 191, 77, 130, 9, 186, 178, 124, 112, 88, 157, 71, 103, 107, 131, 177, 9, 75, 82, 18, 8, 150, 131, 70, 172, 185, 31, 179, 45, 164, 120, 124, 185, 150, 136, 118, 153, 147, 77, 80, 178, 154, 95, 39, 172, 57, 164, 123, 61, 79, 105, 175, 139, 52, 69, 65, 96, 46, 180, 86, 105, 96, 11, 125, 56, 18, 46, 4, 21, 132, 13, 66, 156, 68, 83, 173, 161, 192, 84, 81, 183, 143, 78, 200, 159, 114, 143, 126, 109, 146, 52, 161, 139, 155, 63, 23, 39, 51, 42, 121, 87, 4, 119, 52, 76, 61, 92, 87, 191, 88, 120, 107, 83, 150, 126, 155, 180, 119, 54, 87, 64, 6, 175, 29, 84, 24, 72, 105, 150, 120, 113, 14, 186, 14, 73, 145, 178, 135, 2, 125, 130, 20, 178, 64, 159, 157, 133, 169, 189, 45, 43, 127, 135, 199, 95, 59, 70, 189, 177, 47, 159, 112, 120, 24, 7, 32, 41, 41, 93, 64, 34, 35, 114, 91, 26, 37, 162, 40, 84, 15, 31, 109, 195, 31, 34, 119, 105, 140, 51, 136, 126, 99, 93, 153, 34, 100, 162, 165, 62, 134, 110, 141, 34, 70, 54, 17, 114, 122, 170, 177, 155, 125, 143, 120, 143, 194, 198, 123, 61, 99, 21, 151, 23, 136, 93, 90, 108, 43, 105, 10, 194, 62, 34, 197, 137, 10, 58, 95, 182, 82, 155, 160, 149, 91, 120, 102, 5, 176, 129, 171, 96, 162, 31, 153, 119, 157, 160, 193, 188, 194, 18, 110, 146, 135, 99, 8, 124, 105, 81, 168, 38, 64, 86, 11, 81, 182, 72, 87, 83, 24, 150, 7, 138, 148, 173, 111, 11, 75, 71, 40, 134, 7, 11, 96, 90, 49, 19, 133, 155, 194, 153, 168, 149, 67, 69, 80, 22, 113, 92, 116, 117, 154, 136, 117, 198, 34, 44, 58, 103, 3, 76, 107, 153, 106, 39, 66, 21, 156, 42, 180, 165, 20, 45, 143, 44, 34, 132, 5, 101, 18, 136, 52, 157, 26, 59, 193, 2, 129, 31, 73, 119, 45, 24, 113, 158, 78, 2, 121, 30, 195, 154, 43, 183, 39, 179, 134, 175, 58, 17, 148, 139, 110, 122, 194, 158, 64, 73, 22, 77, 123, 109, 85, 10, 23, 69, 163, 145, 113, 81, 150, 200, 29, 11, 45, 116, 78, 20, 161, 43, 177, 147, 90, 129, 116, 10, 138, 157, 196, 95, 43, 44, 183, 65, 114, 121, 134, 153, 58, 86, 59, 183, 74, 160, 192, 158, 69, 73, 47, 45, 89, 65, 139, 135, 8, 132, 161, 49, 116, 12, 75, 157, 106, 42, 70, 22, 67, 176, 173, 49, 162, 6, 28, 185, 3, 3, 90, 130, 118, 68, 2, 22, 199, 146, 137, 22, 82, 50, 87, 152, 96, 23, 190, 41, 99, 175, 117, 194, 80, 173, 33, 140, 88, 160, 11, 125, 179, 153, 50, 151, 29, 105, 98, 125, 96, 181, 143, 141, 82, 111, 167, 26, 130, 172, 61, 25, 20, 186, 173, 127, 99, 43, 2, 105, 159, 152, 111, 45, 107, 10, 129, 47, 132, 83, 61, 9, 57, 116, 17, 38, 87, 83, 134, 24, 194, 142, 43, 40, 184, 87, 85, 15, 100, 32, 9, 112, 118, 78, 127, 114, 70, 14, 48, 150, 169, 20, 10, 14, 138, 80, 46, 199, 61, 46, 105, 102, 104, 19, 148, 28, 105, 8, 140, 100, 124, 92, 67, 135, 126, 60, 63, 148, 72, 121, 76, 3, 144, 199, 43, 38, 176, 186, 192, 10, 144, 185, 174, 151, 7, 177, 192, 187, 1, 124, 32, 140, 98, 123, 27, 66, 24, 148, 76, 123, 9, 140, 197, 87, 135, 23, 79, 102, 48, 17, 188, 81, 92, 146, 123, 40, 118, 61, 11, 141, 122, 6, 139, 9, 152, 197, 82, 137, 70, 147, 67, 91, 147, 121, 195, 99, 83, 136, 195, 131, 99, 21, 103, 166, 197, 127, 167, 112, 104, 26, 4, 187, 51, 3, 14, 93, 151, 27, 1, 114, 60, 66, 110, 27, 67, 163, 180, 15, 86, 126, 164, 140, 157, 66, 13, 91, 139, 38, 8, 116, 136, 19, 25, 100, 73, 100, 82, 136, 56, 119, 26, 179, 113, 18, 139, 190, 29, 97, 122, 92, 76, 160, 181, 99, 79, 147, 163, 33, 198, 183, 17, 110, 75, 101, 155, 99, 19, 84, 118, 137, 98, 101, 90, 100, 153, 39, 23, 96, 150, 35, 169, 88, 40, 94, 107, 110, 7, 191, 182, 49, 93, 12, 55, 185, 99, 13, 102, 168, 125, 103, 110, 106, 25, 127, 150, 186, 152, 19, 146, 185, 92, 84, 104, 83, 50, 93, 146, 61, 187, 15, 196, 27, 153, 166, 158, 151, 66, 110, 54, 52, 160, 124, 78, 18, 21, 3, 57, 82, 141, 40, 80, 192, 17, 99, 82, 102, 147, 80, 23, 68, 19, 185, 187, 72, 19, 200, 2, 125, 171, 108, 188, 109, 152, 156, 132, 68, 173, 77, 111, 56, 163, 99, 67, 64, 121, 14, 52, 190, 93, 104, 124, 21, 179, 186, 81, 186, 111, 166, 122, 26, 134, 93, 126, 58, 151, 2, 110, 71, 60, 57, 74, 177, 183, 155, 191, 107, 83, 169, 96, 66, 179, 90, 57, 77, 100, 133, 88, 165, 157, 184, 17, 173, 109, 180, 52, 192, 182, 71, 131, 19, 87, 140, 50, 19, 173, 128, 133, 12, 84, 161, 1, 169, 115, 84, 88, 169, 32, 166, 181, 98, 9, 130, 196, 198, 137, 176, 101, 10, 149, 85, 76, 102, 136, 14, 179, 138, 48, 172, 178, 192, 16, 51, 182, 139, 70, 53, 197, 84, 27, 127, 156, 87, 16, 7, 179, 169, 11, 126, 78, 51, 150, 33, 179, 164, 65, 98, 36, 73, 12, 179, 94, 85, 143, 73, 140, 66, 132, 122, 182, 195, 33, 75, 99, 27, 5, 7, 165, 43, 95, 70, 135, 71, 10, 191, 20, 178, 112, 132, 78, 85, 128, 197, 116, 27, 69, 171, 95, 150, 38, 149, 178, 46, 142, 180, 89, 167, 119, 200, 160, 114, 3, 165, 131, 162, 43, 154, 148, 178, 130, 45, 170, 196, 11, 88, 174, 82, 188, 183, 8, 99, 5, 55, 129, 100, 48, 59, 71, 158, 191, 176, 108, 116, 66, 130, 113, 145, 60, 144, 162, 8, 177, 181, 149, 181, 2, 42, 100, 153, 166, 8, 81, 35, 157, 151, 169, 22, 110, 176, 23, 158, 34, 114, 110, 31, 99, 15, 179, 120, 138, 34, 151, 113, 169, 69, 119, 69, 48, 55, 52, 127, 62, 99, 59, 93, 22, 54, 174, 200, 121, 179, 104, 139, 133, 20, 86, 106, 169, 80, 49, 160, 167, 89, 88, 88, 167, 21, 164, 51, 165, 38, 116, 105, 185, 152, 42, 70, 186, 47, 77, 5, 132, 162, 46, 27, 170, 123, 65, 104, 41, 82, 93, 100, 109, 137, 197, 197, 97, 107, 139, 155, 174, 64, 61, 100, 134, 9, 106, 52, 118, 100, 47, 21, 67, 81, 155, 33, 115, 133, 198, 145, 135, 65, 112, 101, 111, 56, 172, 88, 107, 27, 127, 39, 60, 149, 71, 3, 62, 40, 190, 150, 20, 119, 78, 4, 102, 31, 195, 100, 106, 154, 166, 128, 147, 107, 21, 63, 140, 59, 181, 176, 122, 134, 7, 190, 91, 11, 97, 64, 185, 194, 116, 49, 37, 98, 60, 110, 88, 83, 136, 136, 51, 59, 67, 2, 4, 115, 82, 74, 116, 45, 87, 38, 171, 169, 119, 107, 34, 26, 74, 32, 38, 141, 111, 75, 77, 7, 81, 74, 19, 29, 108, 150, 144, 137, 114, 44, 25, 138, 142, 115, 100, 9, 70, 24, 40, 67, 185, 150, 85, 119, 176, 2, 168, 59, 40, 127, 170, 36, 161, 41, 107, 95, 66, 32, 151, 22, 25, 51, 75, 43, 168, 141, 162, 169, 27, 1, 83, 117, 52, 117, 44, 97, 71, 124, 68, 73, 99, 111, 56, 161, 112, 54, 11, 49, 8, 188, 165, 74, 105, 86, 156, 24, 52, 102, 108, 27, 15, 132, 26, 134, 133, 60, 116, 52, 22, 180, 110, 136, 73, 17, 1, 101, 150, 193, 159, 192, 99, 167, 94, 19, 129, 152, 51, 74, 174, 86, 186, 159, 141, 40, 50, 36, 43, 172, 196, 169, 165, 175, 142, 192, 166, 85, 65, 143, 145, 129, 129, 169, 38, 65, 179, 15, 34, 143, 21, 53, 41, 147, 195, 123, 18, 154, 170, 99, 54, 36, 151, 90, 140, 192, 153, 3, 130, 45, 132, 165, 68, 52, 28, 40, 133, 152, 66, 105, 67, 4, 186, 122, 65, 43, 21, 170, 191, 21, 62, 8, 100, 146, 11, 156, 100, 197, 52, 77, 37, 174, 79, 155, 118, 164, 124, 48, 20, 78, 63, 7, 32, 49, 170, 151, 70, 44, 170, 138, 156, 3, 84, 20, 38, 192, 172, 64, 121, 184, 142, 113, 100, 152, 77, 157, 135, 107, 80, 45, 65, 143, 102, 12, 89, 21, 29, 4, 172, 9, 31, 79, 113, 184, 69, 107, 87, 94, 58, 95, 20, 193, 189, 147, 135, 153, 138, 85, 91, 68, 160, 173, 47, 187, 44, 115, 41, 91, 75, 169, 195, 18, 57, 109, 193, 25, 188, 14, 199, 97, 136, 94, 85, 111, 62, 165, 20, 13, 63, 40, 13, 141, 109, 162, 16, 193, 103, 105, 63, 110, 27, 31, 2, 85, 48, 177, 71, 112, 38, 94, 31, 71, 127, 21, 3, 28, 59, 71, 44, 142, 44, 18, 127, 29, 158, 166, 154, 62, 13, 189, 44, 78, 191, 23, 46, 122, 136, 129, 16, 19, 80, 164, 103, 148, 94, 3, 87, 162, 44, 138, 13, 13, 91, 25, 173, 135, 122, 14, 56, 47, 134, 57, 86, 119, 185, 90, 143, 76, 157, 153, 84, 187, 46, 162, 95, 189, 85, 64, 137, 7, 101, 21, 115, 55, 186, 117, 77, 103, 16, 122, 45, 90, 80, 111, 18, 89, 107, 109, 79, 11, 154, 174, 139, 130, 53, 38, 18, 82, 178, 158, 67, 79, 152, 199, 105, 6, 100, 83, 53, 55, 99, 88, 120, 84, 57, 1, 69, 54, 179, 184, 157, 88, 47, 8, 187, 144, 5, 60, 84, 50, 85, 35, 30, 134, 120, 137, 136, 40, 24, 41, 33, 135, 127, 153, 149, 25, 117, 43, 73, 85, 109, 61, 121, 109, 141, 95, 126, 125, 41, 83, 135, 186, 92, 80, 93, 177, 76, 50, 15, 68, 46, 190, 147, 65, 108, 175, 148, 33, 172, 141, 142, 187, 113, 47, 16, 187, 61, 84, 56, 56, 62, 32, 148, 81, 9, 4, 3, 19, 44, 194, 187, 32, 161, 126, 172, 170, 188, 184, 92, 98, 65, 1, 80, 136, 81, 29, 74, 70, 69, 189, 165, 181, 23, 43, 149, 103, 117, 192, 168, 76, 11, 178, 7, 138, 106, 170, 10, 192, 193, 68, 12, 18, 138, 83, 99, 166, 194, 50, 96, 127, 117, 85, 88, 172, 13, 13, 44, 36, 194, 173, 127, 10 ]
# max(A)
# B = 61

# solve(A,B)



# Suggested Solution:
#     class Solution:
#     # @param A : list of integers
#     # @param B : integer
#     # @return an integer
#     def solve(self, weights, days):
#         def is_enough(capacity):  #helper function, to check if given capacity is enough
#             count = 1
#             max_weight = capacity
#             for w in weights:
#                 if w > max_weight:
#                     max_weight = capacity
#                     count += 1
#                 max_weight -= w
#             return  count <= days

#         l, r = max(weights), sum(weights)
#         while l < r:
#             m = (l+r) // 2
#             if is_enough(m):
#                 r = m
#             else:
#                 l = m+1
#         return l
    
#     class Solution {
#     def solve(A: Array[Int], B: Int): Int  = {

#         def divisionOfCurLot ( A : Array[Int], currLot : Int) : Int = {
#             var res= 0
#             var sum = 0
#             for ( weight <- A){
#                 if( weight > currLot)
#                     return -1 
#                 if ( (sum + weight )> currLot){
#                     sum = weight
#                     res += 1
#                 }
#                 else sum = sum + weight
#             }
#             res + 1
#         }

#         var s = A.sum
#         //sumArr.foreach(print)
#         //b search over the sumArr 
        
#         var left = 0
#         var n = A.size
#         var right = s + 1
#         while ( left < right){
#             var mid = left + ( right - left ) / 2
#             //print(" mid : " + mid )
#             var currLot = mid
#             var curDiv = divisionOfCurLot(A , currLot) 
#             //print( " curDiv: " + curDiv)
#             if ( curDiv != -1 && curDiv <= B)
#                 right = mid
#             else left = mid + 1
#            // print("\n")
#         }
#         return right
        
#         //return 0
#     }
# }
# /**
#  * @input A : Integer array
#  * @input B : Integer
#  * 
#  * @Output Integer
#  */
# func solve(A []int , B int )  (int) {
#     maxWeight := A[0]
#     sum := 0

#     for _, v := range A {
#         maxWeight = max(maxWeight, v)
#         sum += v
#     }

#     feasable := func(A []int, weight int, kDays int) bool {
#         daysUsed := 1
#         taken := 0
#         for _, v := range A {
#             taken += v
#             if taken > weight {
#                 daysUsed++
#                 if daysUsed > kDays {
#                     return false
#                 }
#                 taken = v
#             }
#         }
#         return true
#     }

#     for maxWeight < sum {
#         mid := (maxWeight+sum)/2

#         if feasable(A, mid, B) {
#             sum = mid
#         } else {
#             maxWeight = mid + 1
#         }
#     }
#     return maxWeight
# }

# func max(a, b int) int {
#     if a >= b {
#         return a
#     }
#     return b
# }


# public class Solution {
#     public int solve(ArrayList<Integer> A, int B) {
#         int low = 0;
#         int high = 0;

#         for (int num : A) {
#             low = Math.max(low, num);
#             high += num;
#         }
#         //System.out.println(high);

#         while (low < high) {
#             int mid = low + (high - low) / 2;
#             int days = numberOfDays(A, mid);
#             //System.out.println(low + " " + days);

#             if (days > B) {
#                 low = mid + 1;
#             } else {
#                 high = mid;
#             } 
#         }

#         return low;
#     }

#     public int numberOfDays(ArrayList<Integer> A, int maxWt) {
#         int numDays = 1;
#         int sum = 0;

#         for (int num : A) {
#             sum += num;

#             if (sum > maxWt) {
#                 numDays++;
#                 sum = num;
#             } 
#         }


#         return numDays;
#     }
# }

